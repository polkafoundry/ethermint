// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ethermint/evm/v1/op.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Operation is a structure that describes a transaction to be sent on behalf of a user. To avoid confusion, it is not
// named “transaction”
type Operation struct {
	// sender: the account making the operation
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// nonce: anti-replay parameter; also used as the salt for first-time account creation
	Nonce uint64 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// init_code: the initCode of the account (needed if and only if the account is not yet on-chain and needs to be
	// created)
	InitCode []byte `protobuf:"bytes,3,opt,name=init_code,json=initCode,proto3" json:"init_code,omitempty"`
	// call_data: the data to pass to the sender during the main execution call
	CallData []byte `protobuf:"bytes,4,opt,name=call_data,json=callData,proto3" json:"call_data,omitempty"`
	// call_gas_limit: the amount of gas to allocate the main execution call
	CallGasLimit uint64 `protobuf:"varint,5,opt,name=call_gas_limit,json=callGasLimit,proto3" json:"call_gas_limit,omitempty"`
	// verification_gas_limit: the amount of gas to allocate for the verification step
	VerificationGasLimit uint64 `protobuf:"varint,6,opt,name=verification_gas_limit,json=verificationGasLimit,proto3" json:"verification_gas_limit,omitempty"`
	// pre_verification_gas_limit: the amount of gas to pay for to compensate the bundler for pre-verification execution
	// and calldata
	PreVerificationGas uint64 `protobuf:"varint,7,opt,name=pre_verification_gas,json=preVerificationGas,proto3" json:"pre_verification_gas,omitempty"`
	// max_fee_per_gas: maximum fee per gas (similar to EIP-1559 max_fee_per_gas)
	MaxFeePerGas uint64 `protobuf:"varint,8,opt,name=max_fee_per_gas,json=maxFeePerGas,proto3" json:"max_fee_per_gas,omitempty"`
	// max_priority_fee_per_gas: maximum priority fee per gas (similar to EIP-1559 max_priority_fee_per_gas)
	MaxPriorityFeePerGas uint64 `protobuf:"varint,9,opt,name=max_priority_fee_per_gas,json=maxPriorityFeePerGas,proto3" json:"max_priority_fee_per_gas,omitempty"`
	// paymaster_and_data: address of paymaster sponsoring the transaction, followed by extra data to send to the
	// paymaster (empty for self-sponsored transaction)
	PaymasterAndData []byte `protobuf:"bytes,10,opt,name=paymaster_and_data,json=paymasterAndData,proto3" json:"paymaster_and_data,omitempty"`
	// signature: data passed into the account along with the nonce during the verification step
	Signature []byte `protobuf:"bytes,11,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *Operation) Reset()         { *m = Operation{} }
func (m *Operation) String() string { return proto.CompactTextString(m) }
func (*Operation) ProtoMessage()    {}
func (*Operation) Descriptor() ([]byte, []int) {
	return fileDescriptor_200c2ea637eddcf1, []int{0}
}
func (m *Operation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Operation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Operation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Operation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Operation.Merge(m, src)
}
func (m *Operation) XXX_Size() int {
	return m.Size()
}
func (m *Operation) XXX_DiscardUnknown() {
	xxx_messageInfo_Operation.DiscardUnknown(m)
}

var xxx_messageInfo_Operation proto.InternalMessageInfo

// MsgEthereumOpResponse encapsulates an Ethereum operation as an SDK message.
type MsgEthereumOp struct {
	// operation: user operation
	Operation Operation `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation"`
	// entry_point: address of a singleton contract to execute bundles of Operations
	EntryPoint string `protobuf:"bytes,2,opt,name=entry_point,json=entryPoint,proto3" json:"entry_point,omitempty"`
}

func (m *MsgEthereumOp) Reset()         { *m = MsgEthereumOp{} }
func (m *MsgEthereumOp) String() string { return proto.CompactTextString(m) }
func (*MsgEthereumOp) ProtoMessage()    {}
func (*MsgEthereumOp) Descriptor() ([]byte, []int) {
	return fileDescriptor_200c2ea637eddcf1, []int{1}
}
func (m *MsgEthereumOp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEthereumOp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEthereumOp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEthereumOp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEthereumOp.Merge(m, src)
}
func (m *MsgEthereumOp) XXX_Size() int {
	return m.Size()
}
func (m *MsgEthereumOp) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEthereumOp.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEthereumOp proto.InternalMessageInfo

// MsgEthereumOpResponse defines the Msg/EthereumOp response type.
type MsgEthereumOpResponse struct {
}

func (m *MsgEthereumOpResponse) Reset()         { *m = MsgEthereumOpResponse{} }
func (m *MsgEthereumOpResponse) String() string { return proto.CompactTextString(m) }
func (*MsgEthereumOpResponse) ProtoMessage()    {}
func (*MsgEthereumOpResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_200c2ea637eddcf1, []int{2}
}
func (m *MsgEthereumOpResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEthereumOpResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEthereumOpResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEthereumOpResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEthereumOpResponse.Merge(m, src)
}
func (m *MsgEthereumOpResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgEthereumOpResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEthereumOpResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEthereumOpResponse proto.InternalMessageInfo

// ExtensionOptionsEthereumOp is an extension option for ethereum transactions
type ExtensionOptionsEthereumOp struct {
}

func (m *ExtensionOptionsEthereumOp) Reset()         { *m = ExtensionOptionsEthereumOp{} }
func (m *ExtensionOptionsEthereumOp) String() string { return proto.CompactTextString(m) }
func (*ExtensionOptionsEthereumOp) ProtoMessage()    {}
func (*ExtensionOptionsEthereumOp) Descriptor() ([]byte, []int) {
	return fileDescriptor_200c2ea637eddcf1, []int{3}
}
func (m *ExtensionOptionsEthereumOp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExtensionOptionsEthereumOp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExtensionOptionsEthereumOp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExtensionOptionsEthereumOp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtensionOptionsEthereumOp.Merge(m, src)
}
func (m *ExtensionOptionsEthereumOp) XXX_Size() int {
	return m.Size()
}
func (m *ExtensionOptionsEthereumOp) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtensionOptionsEthereumOp.DiscardUnknown(m)
}

var xxx_messageInfo_ExtensionOptionsEthereumOp proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Operation)(nil), "ethermint.evm.v1.Operation")
	proto.RegisterType((*MsgEthereumOp)(nil), "ethermint.evm.v1.MsgEthereumOp")
	proto.RegisterType((*MsgEthereumOpResponse)(nil), "ethermint.evm.v1.MsgEthereumOpResponse")
	proto.RegisterType((*ExtensionOptionsEthereumOp)(nil), "ethermint.evm.v1.ExtensionOptionsEthereumOp")
}

func init() { proto.RegisterFile("ethermint/evm/v1/op.proto", fileDescriptor_200c2ea637eddcf1) }

var fileDescriptor_200c2ea637eddcf1 = []byte{
	// 549 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x53, 0x3f, 0x6f, 0x13, 0x31,
	0x14, 0xcf, 0xb5, 0x69, 0xe9, 0xbd, 0x16, 0xa8, 0xac, 0x50, 0x8e, 0xb4, 0x5c, 0xa2, 0x88, 0x42,
	0x06, 0x74, 0x47, 0x0b, 0x62, 0x60, 0x01, 0x0a, 0x85, 0x85, 0x2a, 0xd1, 0x0d, 0x0c, 0x2c, 0x27,
	0x37, 0xf7, 0x7a, 0xb5, 0x94, 0xb3, 0x2d, 0xdb, 0x09, 0xc9, 0xc0, 0xc2, 0x80, 0x18, 0x91, 0xf8,
	0x02, 0x7c, 0x06, 0x3e, 0x45, 0xc7, 0x4a, 0x2c, 0x4c, 0x08, 0x25, 0x7c, 0x10, 0x74, 0xbe, 0x90,
	0x3f, 0xed, 0xc0, 0x66, 0xff, 0xfe, 0xbc, 0xf7, 0xd3, 0x7b, 0x36, 0xdc, 0x42, 0x73, 0x8a, 0x2a,
	0x63, 0xdc, 0x84, 0xd8, 0xcf, 0xc2, 0xfe, 0x5e, 0x28, 0x64, 0x20, 0x95, 0x30, 0x82, 0x6c, 0x4e,
	0xa9, 0x00, 0xfb, 0x59, 0xd0, 0xdf, 0xab, 0x56, 0x52, 0x91, 0x0a, 0x4b, 0x86, 0xf9, 0xa9, 0xd0,
	0x55, 0x77, 0x52, 0x21, 0xd2, 0x2e, 0x86, 0x54, 0xb2, 0x90, 0x72, 0x2e, 0x0c, 0x35, 0x4c, 0x70,
	0x5d, 0xb0, 0x8d, 0xef, 0xcb, 0xe0, 0xb6, 0x24, 0x2a, 0x0b, 0x92, 0x2d, 0x58, 0xd5, 0xc8, 0x13,
	0x54, 0x9e, 0x53, 0x77, 0x9a, 0x6e, 0x34, 0xb9, 0x91, 0x0a, 0xac, 0x70, 0xc1, 0x3b, 0xe8, 0x2d,
	0xd5, 0x9d, 0x66, 0x39, 0x2a, 0x2e, 0x64, 0x1b, 0x5c, 0xc6, 0x99, 0x89, 0x3b, 0x22, 0x41, 0x6f,
	0xb9, 0xee, 0x34, 0x37, 0xa2, 0xb5, 0x1c, 0x78, 0x21, 0x12, 0x4b, 0x76, 0x68, 0xb7, 0x1b, 0x27,
	0xd4, 0x50, 0xaf, 0x5c, 0x90, 0x39, 0xf0, 0x92, 0x1a, 0x4a, 0xee, 0xc0, 0x35, 0x4b, 0xa6, 0x54,
	0xc7, 0x5d, 0x96, 0x31, 0xe3, 0xad, 0xd8, 0xc2, 0x1b, 0x39, 0xfa, 0x9a, 0xea, 0x37, 0x39, 0x46,
	0x1e, 0xc1, 0x56, 0x1f, 0x15, 0x3b, 0x61, 0x1d, 0x9b, 0x6e, 0x4e, 0xbd, 0x6a, 0xd5, 0x95, 0x79,
	0x76, 0xea, 0x7a, 0x00, 0x15, 0xa9, 0x30, 0xbe, 0xe8, 0xf4, 0xae, 0x58, 0x0f, 0x91, 0x0a, 0xdf,
	0x2e, 0xda, 0xc8, 0x2e, 0x5c, 0xcf, 0xe8, 0x20, 0x3e, 0x41, 0x8c, 0x25, 0x2a, 0x2b, 0x5e, 0x2b,
	0xe2, 0x64, 0x74, 0xf0, 0x0a, 0xb1, 0x8d, 0x2a, 0x97, 0x3d, 0x06, 0x2f, 0x97, 0x49, 0xc5, 0x84,
	0x62, 0x66, 0xb8, 0xa0, 0x77, 0x8b, 0x40, 0x19, 0x1d, 0xb4, 0x27, 0xf4, 0xcc, 0x77, 0x1f, 0x88,
	0xa4, 0xc3, 0x8c, 0x6a, 0x83, 0x2a, 0xa6, 0x3c, 0x29, 0x46, 0x02, 0x76, 0x24, 0x9b, 0x53, 0xe6,
	0x39, 0x4f, 0xec, 0x68, 0x76, 0xc0, 0xd5, 0x2c, 0xe5, 0xd4, 0xf4, 0x14, 0x7a, 0xeb, 0x56, 0x34,
	0x03, 0x9e, 0x94, 0x3f, 0x7f, 0xab, 0x95, 0x1a, 0xef, 0xe1, 0xea, 0x91, 0x4e, 0x0f, 0xf3, 0xfd,
	0x63, 0x2f, 0x6b, 0x49, 0xf2, 0x14, 0x5c, 0xf1, 0x6f, 0x89, 0x76, 0x75, 0xeb, 0xfb, 0xdb, 0xc1,
	0xc5, 0xf7, 0x11, 0x4c, 0xf7, 0x7c, 0x50, 0x3e, 0xfb, 0x55, 0x2b, 0x45, 0x33, 0x0f, 0xa9, 0xc1,
	0x3a, 0x72, 0xa3, 0x86, 0xb1, 0x14, 0x8c, 0x1b, 0xbb, 0x66, 0x37, 0x02, 0x0b, 0xb5, 0x73, 0x64,
	0xd2, 0xf8, 0x26, 0xdc, 0x58, 0x68, 0x1c, 0xa1, 0x96, 0x82, 0x6b, 0x6c, 0x34, 0xa0, 0x7a, 0x38,
	0x30, 0xc8, 0x35, 0x13, 0xbc, 0x25, 0xed, 0x03, 0x9b, 0xa9, 0x0a, 0xf3, 0xfe, 0x27, 0x07, 0x56,
	0x5a, 0xf2, 0x48, 0xa7, 0xe4, 0x03, 0xc0, 0x5c, 0xf8, 0xda, 0xe5, 0xa4, 0x0b, 0x4d, 0xaa, 0xf7,
	0xfe, 0x23, 0x98, 0xa6, 0xd8, 0xfd, 0xf8, 0xe3, 0xcf, 0xd7, 0xa5, 0x5a, 0xe3, 0x76, 0x78, 0xe9,
	0xdb, 0xe0, 0x44, 0x1d, 0x0b, 0x79, 0xf0, 0xec, 0x6c, 0xe4, 0x3b, 0xe7, 0x23, 0xdf, 0xf9, 0x3d,
	0xf2, 0x9d, 0x2f, 0x63, 0xbf, 0x74, 0x3e, 0xf6, 0x4b, 0x3f, 0xc7, 0x7e, 0xe9, 0xdd, 0xdd, 0x94,
	0x99, 0xd3, 0xde, 0x71, 0xd0, 0x11, 0x59, 0x6e, 0x14, 0x7a, 0xae, 0xd0, 0xc0, 0x96, 0x32, 0x43,
	0x89, 0xfa, 0x78, 0xd5, 0x7e, 0x9e, 0x87, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xff, 0x31, 0x86,
	0x7d, 0x9f, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// OpMsgClient is the client API for OpMsg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OpMsgClient interface {
	// EthereumOp defines a method submitting Ethereum operations.
	EthereumOp(ctx context.Context, in *MsgEthereumOp, opts ...grpc.CallOption) (*MsgEthereumOpResponse, error)
}

type opMsgClient struct {
	cc grpc1.ClientConn
}

func NewOpMsgClient(cc grpc1.ClientConn) OpMsgClient {
	return &opMsgClient{cc}
}

func (c *opMsgClient) EthereumOp(ctx context.Context, in *MsgEthereumOp, opts ...grpc.CallOption) (*MsgEthereumOpResponse, error) {
	out := new(MsgEthereumOpResponse)
	err := c.cc.Invoke(ctx, "/ethermint.evm.v1.OpMsg/EthereumOp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpMsgServer is the server API for OpMsg service.
type OpMsgServer interface {
	// EthereumOp defines a method submitting Ethereum operations.
	EthereumOp(context.Context, *MsgEthereumOp) (*MsgEthereumOpResponse, error)
}

// UnimplementedOpMsgServer can be embedded to have forward compatible implementations.
type UnimplementedOpMsgServer struct {
}

func (*UnimplementedOpMsgServer) EthereumOp(ctx context.Context, req *MsgEthereumOp) (*MsgEthereumOpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EthereumOp not implemented")
}

func RegisterOpMsgServer(s grpc1.Server, srv OpMsgServer) {
	s.RegisterService(&_OpMsg_serviceDesc, srv)
}

func _OpMsg_EthereumOp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgEthereumOp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpMsgServer).EthereumOp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethermint.evm.v1.OpMsg/EthereumOp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpMsgServer).EthereumOp(ctx, req.(*MsgEthereumOp))
	}
	return interceptor(ctx, in, info, handler)
}

var _OpMsg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ethermint.evm.v1.OpMsg",
	HandlerType: (*OpMsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EthereumOp",
			Handler:    _OpMsg_EthereumOp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ethermint/evm/v1/op.proto",
}

func (m *Operation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Operation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Operation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintOp(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.PaymasterAndData) > 0 {
		i -= len(m.PaymasterAndData)
		copy(dAtA[i:], m.PaymasterAndData)
		i = encodeVarintOp(dAtA, i, uint64(len(m.PaymasterAndData)))
		i--
		dAtA[i] = 0x52
	}
	if m.MaxPriorityFeePerGas != 0 {
		i = encodeVarintOp(dAtA, i, uint64(m.MaxPriorityFeePerGas))
		i--
		dAtA[i] = 0x48
	}
	if m.MaxFeePerGas != 0 {
		i = encodeVarintOp(dAtA, i, uint64(m.MaxFeePerGas))
		i--
		dAtA[i] = 0x40
	}
	if m.PreVerificationGas != 0 {
		i = encodeVarintOp(dAtA, i, uint64(m.PreVerificationGas))
		i--
		dAtA[i] = 0x38
	}
	if m.VerificationGasLimit != 0 {
		i = encodeVarintOp(dAtA, i, uint64(m.VerificationGasLimit))
		i--
		dAtA[i] = 0x30
	}
	if m.CallGasLimit != 0 {
		i = encodeVarintOp(dAtA, i, uint64(m.CallGasLimit))
		i--
		dAtA[i] = 0x28
	}
	if len(m.CallData) > 0 {
		i -= len(m.CallData)
		copy(dAtA[i:], m.CallData)
		i = encodeVarintOp(dAtA, i, uint64(len(m.CallData)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.InitCode) > 0 {
		i -= len(m.InitCode)
		copy(dAtA[i:], m.InitCode)
		i = encodeVarintOp(dAtA, i, uint64(len(m.InitCode)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Nonce != 0 {
		i = encodeVarintOp(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintOp(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgEthereumOp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEthereumOp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEthereumOp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EntryPoint) > 0 {
		i -= len(m.EntryPoint)
		copy(dAtA[i:], m.EntryPoint)
		i = encodeVarintOp(dAtA, i, uint64(len(m.EntryPoint)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Operation.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOp(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgEthereumOpResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEthereumOpResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEthereumOpResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ExtensionOptionsEthereumOp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExtensionOptionsEthereumOp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExtensionOptionsEthereumOp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintOp(dAtA []byte, offset int, v uint64) int {
	offset -= sovOp(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Operation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovOp(uint64(l))
	}
	if m.Nonce != 0 {
		n += 1 + sovOp(uint64(m.Nonce))
	}
	l = len(m.InitCode)
	if l > 0 {
		n += 1 + l + sovOp(uint64(l))
	}
	l = len(m.CallData)
	if l > 0 {
		n += 1 + l + sovOp(uint64(l))
	}
	if m.CallGasLimit != 0 {
		n += 1 + sovOp(uint64(m.CallGasLimit))
	}
	if m.VerificationGasLimit != 0 {
		n += 1 + sovOp(uint64(m.VerificationGasLimit))
	}
	if m.PreVerificationGas != 0 {
		n += 1 + sovOp(uint64(m.PreVerificationGas))
	}
	if m.MaxFeePerGas != 0 {
		n += 1 + sovOp(uint64(m.MaxFeePerGas))
	}
	if m.MaxPriorityFeePerGas != 0 {
		n += 1 + sovOp(uint64(m.MaxPriorityFeePerGas))
	}
	l = len(m.PaymasterAndData)
	if l > 0 {
		n += 1 + l + sovOp(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovOp(uint64(l))
	}
	return n
}

func (m *MsgEthereumOp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Operation.Size()
	n += 1 + l + sovOp(uint64(l))
	l = len(m.EntryPoint)
	if l > 0 {
		n += 1 + l + sovOp(uint64(l))
	}
	return n
}

func (m *MsgEthereumOpResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ExtensionOptionsEthereumOp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovOp(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOp(x uint64) (n int) {
	return sovOp(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Operation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Operation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Operation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitCode", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOp
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitCode = append(m.InitCode[:0], dAtA[iNdEx:postIndex]...)
			if m.InitCode == nil {
				m.InitCode = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOp
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CallData = append(m.CallData[:0], dAtA[iNdEx:postIndex]...)
			if m.CallData == nil {
				m.CallData = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallGasLimit", wireType)
			}
			m.CallGasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CallGasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerificationGasLimit", wireType)
			}
			m.VerificationGasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VerificationGasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreVerificationGas", wireType)
			}
			m.PreVerificationGas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PreVerificationGas |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxFeePerGas", wireType)
			}
			m.MaxFeePerGas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxFeePerGas |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPriorityFeePerGas", wireType)
			}
			m.MaxPriorityFeePerGas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxPriorityFeePerGas |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymasterAndData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOp
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymasterAndData = append(m.PaymasterAndData[:0], dAtA[iNdEx:postIndex]...)
			if m.PaymasterAndData == nil {
				m.PaymasterAndData = []byte{}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOp
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgEthereumOp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEthereumOp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEthereumOp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Operation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryPoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntryPoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgEthereumOpResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEthereumOpResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEthereumOpResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipOp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExtensionOptionsEthereumOp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExtensionOptionsEthereumOp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExtensionOptionsEthereumOp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipOp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOp(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOp
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOp
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOp
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOp
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOp        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOp          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOp = fmt.Errorf("proto: unexpected end of group")
)
