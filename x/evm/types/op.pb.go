// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ethermint/evm/v1/op.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Operation is a structure that describes a transaction to be sent on behalf of a user. To avoid confusion, it is not
// named “transaction”
type Operation struct {
	// sender: the account making the operation
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// nonce: anti-replay parameter; also used as the salt for first-time account creation
	Nonce uint64 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// init_code: the initCode of the account (needed if and only if the account is not yet on-chain and needs to be
	// created)
	InitCode []byte `protobuf:"bytes,3,opt,name=init_code,json=initCode,proto3" json:"init_code,omitempty"`
	// call_data: the data to pass to the sender during the main execution call
	CallData []byte `protobuf:"bytes,4,opt,name=call_data,json=callData,proto3" json:"call_data,omitempty"`
	// call_gas_limit: the amount of gas to allocate the main execution call
	CallGasLimit uint64 `protobuf:"varint,5,opt,name=call_gas_limit,json=callGasLimit,proto3" json:"call_gas_limit,omitempty"`
	// verification_gas_limit: the amount of gas to allocate for the verification step
	VerificationGasLimit uint64 `protobuf:"varint,6,opt,name=verification_gas_limit,json=verificationGasLimit,proto3" json:"verification_gas_limit,omitempty"`
	// pre_verification_gas_limit: the amount of gas to pay for to compensate the bundler for pre-verification execution
	// and calldata
	PreVerificationGas uint64 `protobuf:"varint,7,opt,name=pre_verification_gas,json=preVerificationGas,proto3" json:"pre_verification_gas,omitempty"`
	// max_fee_per_gas: maximum fee per gas (similar to EIP-1559 max_fee_per_gas)
	MaxFeePerGas uint64 `protobuf:"varint,8,opt,name=max_fee_per_gas,json=maxFeePerGas,proto3" json:"max_fee_per_gas,omitempty"`
	// max_priority_fee_per_gas: maximum priority fee per gas (similar to EIP-1559 max_priority_fee_per_gas)
	MaxPriorityFeePerGas uint64 `protobuf:"varint,9,opt,name=max_priority_fee_per_gas,json=maxPriorityFeePerGas,proto3" json:"max_priority_fee_per_gas,omitempty"`
	// paymaster_and_data: address of paymaster sponsoring the transaction, followed by extra data to send to the
	// paymaster (empty for self-sponsored transaction)
	PaymasterAndData []byte `protobuf:"bytes,10,opt,name=paymaster_and_data,json=paymasterAndData,proto3" json:"paymaster_and_data,omitempty"`
	// signature: data passed into the account along with the nonce during the verification step
	Signature []byte `protobuf:"bytes,11,opt,name=signature,proto3" json:"signature,omitempty" rlp:"-"`
}

func (m *Operation) Reset()         { *m = Operation{} }
func (m *Operation) String() string { return proto.CompactTextString(m) }
func (*Operation) ProtoMessage()    {}
func (*Operation) Descriptor() ([]byte, []int) {
	return fileDescriptor_200c2ea637eddcf1, []int{0}
}
func (m *Operation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Operation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Operation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Operation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Operation.Merge(m, src)
}
func (m *Operation) XXX_Size() int {
	return m.Size()
}
func (m *Operation) XXX_DiscardUnknown() {
	xxx_messageInfo_Operation.DiscardUnknown(m)
}

var xxx_messageInfo_Operation proto.InternalMessageInfo

// EthereumOp encapsulates an Ethereum operation as an SDK message.
type OpMsgEthereum struct {
	// operation: user operation
	Operation Operation `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation"`
	// entry_point: address of a singleton contract to execute bundles of Operations
	EntryPoint string `protobuf:"bytes,2,opt,name=entry_point,json=entryPoint,proto3" json:"entry_point,omitempty"`
	// chain_id of the destination EVM chain
	ChainID *github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=chain_id,json=chainId,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"chainID"`
	Hash    string                                  `protobuf:"bytes,4,opt,name=hash,proto3" json:"hash,omitempty" rlp:"-"`
	Bundler string                                  `protobuf:"bytes,5,opt,name=bundler,proto3" json:"bundler,omitempty" rlp:"-"`
}

func (m *OpMsgEthereum) Reset()         { *m = OpMsgEthereum{} }
func (m *OpMsgEthereum) String() string { return proto.CompactTextString(m) }
func (*OpMsgEthereum) ProtoMessage()    {}
func (*OpMsgEthereum) Descriptor() ([]byte, []int) {
	return fileDescriptor_200c2ea637eddcf1, []int{1}
}
func (m *OpMsgEthereum) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OpMsgEthereum) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OpMsgEthereum.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OpMsgEthereum) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpMsgEthereum.Merge(m, src)
}
func (m *OpMsgEthereum) XXX_Size() int {
	return m.Size()
}
func (m *OpMsgEthereum) XXX_DiscardUnknown() {
	xxx_messageInfo_OpMsgEthereum.DiscardUnknown(m)
}

var xxx_messageInfo_OpMsgEthereum proto.InternalMessageInfo

// EthereumOpResponse defines the Msg/EthereumOp response type.
type OpMsgEthereumResponse struct {
	// hash of the ethereum operation in hex format. This hash differs from the
	// Tendermint sha256 hash of the operation bytes
	Hash             string           `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	ValidationResult ValidationResult `protobuf:"bytes,2,opt,name=validation_result,json=validationResult,proto3" json:"validation_result"`
	Ret              []byte           `protobuf:"bytes,3,opt,name=ret,proto3" json:"ret,omitempty"`
}

func (m *OpMsgEthereumResponse) Reset()         { *m = OpMsgEthereumResponse{} }
func (m *OpMsgEthereumResponse) String() string { return proto.CompactTextString(m) }
func (*OpMsgEthereumResponse) ProtoMessage()    {}
func (*OpMsgEthereumResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_200c2ea637eddcf1, []int{2}
}
func (m *OpMsgEthereumResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OpMsgEthereumResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OpMsgEthereumResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OpMsgEthereumResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpMsgEthereumResponse.Merge(m, src)
}
func (m *OpMsgEthereumResponse) XXX_Size() int {
	return m.Size()
}
func (m *OpMsgEthereumResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OpMsgEthereumResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OpMsgEthereumResponse proto.InternalMessageInfo

// ExtensionOptionsEthereumOp is an extension option for ethereum transactions
type ExtensionOptionsEthereumOp struct {
}

func (m *ExtensionOptionsEthereumOp) Reset()         { *m = ExtensionOptionsEthereumOp{} }
func (m *ExtensionOptionsEthereumOp) String() string { return proto.CompactTextString(m) }
func (*ExtensionOptionsEthereumOp) ProtoMessage()    {}
func (*ExtensionOptionsEthereumOp) Descriptor() ([]byte, []int) {
	return fileDescriptor_200c2ea637eddcf1, []int{3}
}
func (m *ExtensionOptionsEthereumOp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExtensionOptionsEthereumOp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExtensionOptionsEthereumOp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExtensionOptionsEthereumOp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtensionOptionsEthereumOp.Merge(m, src)
}
func (m *ExtensionOptionsEthereumOp) XXX_Size() int {
	return m.Size()
}
func (m *ExtensionOptionsEthereumOp) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtensionOptionsEthereumOp.DiscardUnknown(m)
}

var xxx_messageInfo_ExtensionOptionsEthereumOp proto.InternalMessageInfo

type ReturnInfo struct {
	PreOpGas         []byte `protobuf:"bytes,1,opt,name=pre_op_gas,json=preOpGas,proto3" json:"pre_op_gas,omitempty"`
	PreFund          []byte `protobuf:"bytes,2,opt,name=pre_fund,json=preFund,proto3" json:"pre_fund,omitempty"`
	SigFailed        bool   `protobuf:"varint,3,opt,name=sig_failed,json=sigFailed,proto3" json:"sig_failed,omitempty"`
	ValidAfter       uint64 `protobuf:"varint,4,opt,name=valid_after,json=validAfter,proto3" json:"valid_after,omitempty"`
	ValidUntil       uint64 `protobuf:"varint,5,opt,name=valid_until,json=validUntil,proto3" json:"valid_until,omitempty"`
	PaymasterContext []byte `protobuf:"bytes,6,opt,name=paymaster_context,json=paymasterContext,proto3" json:"paymaster_context,omitempty"`
}

func (m *ReturnInfo) Reset()         { *m = ReturnInfo{} }
func (m *ReturnInfo) String() string { return proto.CompactTextString(m) }
func (*ReturnInfo) ProtoMessage()    {}
func (*ReturnInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_200c2ea637eddcf1, []int{4}
}
func (m *ReturnInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReturnInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReturnInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReturnInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReturnInfo.Merge(m, src)
}
func (m *ReturnInfo) XXX_Size() int {
	return m.Size()
}
func (m *ReturnInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ReturnInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ReturnInfo proto.InternalMessageInfo

func (m *ReturnInfo) GetPreOpGas() []byte {
	if m != nil {
		return m.PreOpGas
	}
	return nil
}

func (m *ReturnInfo) GetPreFund() []byte {
	if m != nil {
		return m.PreFund
	}
	return nil
}

func (m *ReturnInfo) GetSigFailed() bool {
	if m != nil {
		return m.SigFailed
	}
	return false
}

func (m *ReturnInfo) GetValidAfter() uint64 {
	if m != nil {
		return m.ValidAfter
	}
	return 0
}

func (m *ReturnInfo) GetValidUntil() uint64 {
	if m != nil {
		return m.ValidUntil
	}
	return 0
}

func (m *ReturnInfo) GetPaymasterContext() []byte {
	if m != nil {
		return m.PaymasterContext
	}
	return nil
}

type StakeInfo struct {
	Stake           []byte `protobuf:"bytes,1,opt,name=stake,proto3" json:"stake,omitempty"`
	UnstakeDelaySec []byte `protobuf:"bytes,2,opt,name=unstake_delay_sec,json=unstakeDelaySec,proto3" json:"unstake_delay_sec,omitempty"`
}

func (m *StakeInfo) Reset()         { *m = StakeInfo{} }
func (m *StakeInfo) String() string { return proto.CompactTextString(m) }
func (*StakeInfo) ProtoMessage()    {}
func (*StakeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_200c2ea637eddcf1, []int{5}
}
func (m *StakeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StakeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StakeInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StakeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakeInfo.Merge(m, src)
}
func (m *StakeInfo) XXX_Size() int {
	return m.Size()
}
func (m *StakeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_StakeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_StakeInfo proto.InternalMessageInfo

func (m *StakeInfo) GetStake() []byte {
	if m != nil {
		return m.Stake
	}
	return nil
}

func (m *StakeInfo) GetUnstakeDelaySec() []byte {
	if m != nil {
		return m.UnstakeDelaySec
	}
	return nil
}

type AggregatorStakeInfo struct {
	ActualAggregator string    `protobuf:"bytes,1,opt,name=actual_aggregator,json=actualAggregator,proto3" json:"actual_aggregator,omitempty"`
	StakeInfo        StakeInfo `protobuf:"bytes,2,opt,name=stake_info,json=stakeInfo,proto3" json:"stake_info"`
}

func (m *AggregatorStakeInfo) Reset()         { *m = AggregatorStakeInfo{} }
func (m *AggregatorStakeInfo) String() string { return proto.CompactTextString(m) }
func (*AggregatorStakeInfo) ProtoMessage()    {}
func (*AggregatorStakeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_200c2ea637eddcf1, []int{6}
}
func (m *AggregatorStakeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AggregatorStakeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AggregatorStakeInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AggregatorStakeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AggregatorStakeInfo.Merge(m, src)
}
func (m *AggregatorStakeInfo) XXX_Size() int {
	return m.Size()
}
func (m *AggregatorStakeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AggregatorStakeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AggregatorStakeInfo proto.InternalMessageInfo

func (m *AggregatorStakeInfo) GetActualAggregator() string {
	if m != nil {
		return m.ActualAggregator
	}
	return ""
}

func (m *AggregatorStakeInfo) GetStakeInfo() StakeInfo {
	if m != nil {
		return m.StakeInfo
	}
	return StakeInfo{}
}

type ValidationResult struct {
	ReturnInfo    ReturnInfo `protobuf:"bytes,1,opt,name=return_info,json=returnInfo,proto3" json:"return_info"`
	SenderInfo    StakeInfo  `protobuf:"bytes,2,opt,name=sender_info,json=senderInfo,proto3" json:"sender_info"`
	FactoryInfo   StakeInfo  `protobuf:"bytes,3,opt,name=factory_info,json=factoryInfo,proto3" json:"factory_info"`
	PaymasterInfo StakeInfo  `protobuf:"bytes,4,opt,name=paymaster_info,json=paymasterInfo,proto3" json:"paymaster_info"`
}

func (m *ValidationResult) Reset()         { *m = ValidationResult{} }
func (m *ValidationResult) String() string { return proto.CompactTextString(m) }
func (*ValidationResult) ProtoMessage()    {}
func (*ValidationResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_200c2ea637eddcf1, []int{7}
}
func (m *ValidationResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidationResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidationResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidationResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidationResult.Merge(m, src)
}
func (m *ValidationResult) XXX_Size() int {
	return m.Size()
}
func (m *ValidationResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidationResult.DiscardUnknown(m)
}

var xxx_messageInfo_ValidationResult proto.InternalMessageInfo

func (m *ValidationResult) GetReturnInfo() ReturnInfo {
	if m != nil {
		return m.ReturnInfo
	}
	return ReturnInfo{}
}

func (m *ValidationResult) GetSenderInfo() StakeInfo {
	if m != nil {
		return m.SenderInfo
	}
	return StakeInfo{}
}

func (m *ValidationResult) GetFactoryInfo() StakeInfo {
	if m != nil {
		return m.FactoryInfo
	}
	return StakeInfo{}
}

func (m *ValidationResult) GetPaymasterInfo() StakeInfo {
	if m != nil {
		return m.PaymasterInfo
	}
	return StakeInfo{}
}

type ValidationResultWithAggregation struct {
	ReturnInfo     ReturnInfo          `protobuf:"bytes,1,opt,name=return_info,json=returnInfo,proto3" json:"return_info"`
	SenderInfo     StakeInfo           `protobuf:"bytes,2,opt,name=sender_info,json=senderInfo,proto3" json:"sender_info"`
	FactoryInfo    StakeInfo           `protobuf:"bytes,3,opt,name=factory_info,json=factoryInfo,proto3" json:"factory_info"`
	PaymasterInfo  StakeInfo           `protobuf:"bytes,4,opt,name=paymaster_info,json=paymasterInfo,proto3" json:"paymaster_info"`
	AggregatorInfo AggregatorStakeInfo `protobuf:"bytes,5,opt,name=aggregator_info,json=aggregatorInfo,proto3" json:"aggregator_info"`
}

func (m *ValidationResultWithAggregation) Reset()         { *m = ValidationResultWithAggregation{} }
func (m *ValidationResultWithAggregation) String() string { return proto.CompactTextString(m) }
func (*ValidationResultWithAggregation) ProtoMessage()    {}
func (*ValidationResultWithAggregation) Descriptor() ([]byte, []int) {
	return fileDescriptor_200c2ea637eddcf1, []int{8}
}
func (m *ValidationResultWithAggregation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidationResultWithAggregation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidationResultWithAggregation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidationResultWithAggregation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidationResultWithAggregation.Merge(m, src)
}
func (m *ValidationResultWithAggregation) XXX_Size() int {
	return m.Size()
}
func (m *ValidationResultWithAggregation) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidationResultWithAggregation.DiscardUnknown(m)
}

var xxx_messageInfo_ValidationResultWithAggregation proto.InternalMessageInfo

func (m *ValidationResultWithAggregation) GetReturnInfo() ReturnInfo {
	if m != nil {
		return m.ReturnInfo
	}
	return ReturnInfo{}
}

func (m *ValidationResultWithAggregation) GetSenderInfo() StakeInfo {
	if m != nil {
		return m.SenderInfo
	}
	return StakeInfo{}
}

func (m *ValidationResultWithAggregation) GetFactoryInfo() StakeInfo {
	if m != nil {
		return m.FactoryInfo
	}
	return StakeInfo{}
}

func (m *ValidationResultWithAggregation) GetPaymasterInfo() StakeInfo {
	if m != nil {
		return m.PaymasterInfo
	}
	return StakeInfo{}
}

func (m *ValidationResultWithAggregation) GetAggregatorInfo() AggregatorStakeInfo {
	if m != nil {
		return m.AggregatorInfo
	}
	return AggregatorStakeInfo{}
}

func init() {
	proto.RegisterType((*Operation)(nil), "ethermint.evm.v1.Operation")
	proto.RegisterType((*OpMsgEthereum)(nil), "ethermint.evm.v1.OpMsgEthereum")
	proto.RegisterType((*OpMsgEthereumResponse)(nil), "ethermint.evm.v1.OpMsgEthereumResponse")
	proto.RegisterType((*ExtensionOptionsEthereumOp)(nil), "ethermint.evm.v1.ExtensionOptionsEthereumOp")
	proto.RegisterType((*ReturnInfo)(nil), "ethermint.evm.v1.ReturnInfo")
	proto.RegisterType((*StakeInfo)(nil), "ethermint.evm.v1.StakeInfo")
	proto.RegisterType((*AggregatorStakeInfo)(nil), "ethermint.evm.v1.AggregatorStakeInfo")
	proto.RegisterType((*ValidationResult)(nil), "ethermint.evm.v1.ValidationResult")
	proto.RegisterType((*ValidationResultWithAggregation)(nil), "ethermint.evm.v1.ValidationResultWithAggregation")
}

func init() { proto.RegisterFile("ethermint/evm/v1/op.proto", fileDescriptor_200c2ea637eddcf1) }

var fileDescriptor_200c2ea637eddcf1 = []byte{
	// 1029 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x56, 0xcf, 0x6f, 0x1b, 0xc5,
	0x17, 0xcf, 0x26, 0x4e, 0x1d, 0x3f, 0xa7, 0x8d, 0x33, 0xdf, 0x7c, 0x2b, 0x37, 0x4d, 0xbd, 0xd1,
	0x8a, 0x40, 0xa0, 0xd4, 0xa6, 0x01, 0x71, 0xe8, 0x85, 0xfc, 0x6a, 0x20, 0x12, 0x95, 0xa3, 0x2d,
	0x2d, 0x12, 0x1c, 0x56, 0x93, 0xdd, 0xf1, 0x7a, 0xd4, 0xdd, 0x99, 0xd1, 0xec, 0xac, 0x65, 0x1f,
	0xb8, 0x00, 0x07, 0x8e, 0x95, 0xb8, 0x21, 0x0e, 0xdc, 0xf9, 0x23, 0xb8, 0xf6, 0x58, 0xa9, 0x17,
	0xc4, 0x21, 0x42, 0x09, 0x27, 0x8e, 0xfc, 0x05, 0x68, 0x66, 0xd6, 0xde, 0xc4, 0x89, 0x44, 0xb9,
	0x73, 0xf2, 0xcc, 0xe7, 0x7d, 0xde, 0xc7, 0x6f, 0xde, 0x8f, 0x99, 0x85, 0x5b, 0x44, 0xf5, 0x89,
	0x4c, 0x29, 0x53, 0x1d, 0x32, 0x48, 0x3b, 0x83, 0xfb, 0x1d, 0x2e, 0xda, 0x42, 0x72, 0xc5, 0x51,
	0x63, 0x62, 0x6a, 0x93, 0x41, 0xda, 0x1e, 0xdc, 0x5f, 0x5d, 0x89, 0x79, 0xcc, 0x8d, 0xb1, 0xa3,
	0x57, 0x96, 0xb7, 0xba, 0x16, 0x73, 0x1e, 0x27, 0xa4, 0x83, 0x05, 0xed, 0x60, 0xc6, 0xb8, 0xc2,
	0x8a, 0x72, 0x96, 0x59, 0xab, 0xf7, 0xcb, 0x1c, 0xd4, 0xba, 0x82, 0x48, 0x03, 0xa2, 0x9b, 0x70,
	0x2d, 0x23, 0x2c, 0x22, 0xb2, 0xe9, 0xac, 0x3b, 0x9b, 0x35, 0xbf, 0xd8, 0xa1, 0x15, 0x98, 0x67,
	0x9c, 0x85, 0xa4, 0x39, 0xbb, 0xee, 0x6c, 0x56, 0x7c, 0xbb, 0x41, 0xb7, 0xa1, 0x46, 0x19, 0x55,
	0x41, 0xc8, 0x23, 0xd2, 0x9c, 0x5b, 0x77, 0x36, 0x17, 0xfd, 0x05, 0x0d, 0xec, 0xf1, 0xc8, 0x18,
	0x43, 0x9c, 0x24, 0x41, 0x84, 0x15, 0x6e, 0x56, 0xac, 0x51, 0x03, 0xfb, 0x58, 0x61, 0xf4, 0x06,
	0xdc, 0x30, 0xc6, 0x18, 0x67, 0x41, 0x42, 0x53, 0xaa, 0x9a, 0xf3, 0x46, 0x78, 0x51, 0xa3, 0x1f,
	0xe3, 0xec, 0x53, 0x8d, 0xa1, 0x0f, 0xe0, 0xe6, 0x80, 0x48, 0xda, 0xa3, 0xa1, 0x89, 0xee, 0x1c,
	0xfb, 0x9a, 0x61, 0xaf, 0x9c, 0xb7, 0x4e, 0xbc, 0xde, 0x83, 0x15, 0x21, 0x49, 0x30, 0xed, 0xd9,
	0xac, 0x1a, 0x1f, 0x24, 0x24, 0x79, 0x7a, 0xd1, 0x0d, 0x6d, 0xc0, 0x52, 0x8a, 0x87, 0x41, 0x8f,
	0x90, 0x40, 0x10, 0x69, 0xc8, 0x0b, 0x36, 0x9c, 0x14, 0x0f, 0x0f, 0x08, 0x39, 0x22, 0x52, 0xd3,
	0x3e, 0x84, 0xa6, 0xa6, 0x09, 0x49, 0xb9, 0xa4, 0x6a, 0x74, 0x81, 0x5f, 0xb3, 0x01, 0xa5, 0x78,
	0x78, 0x54, 0x98, 0x4b, 0xbf, 0x77, 0x01, 0x09, 0x3c, 0x4a, 0x71, 0xa6, 0x88, 0x0c, 0x30, 0x8b,
	0x6c, 0x4a, 0xc0, 0xa4, 0xa4, 0x31, 0xb1, 0xec, 0xb0, 0xc8, 0xa4, 0xe6, 0x6d, 0xa8, 0x65, 0x34,
	0x66, 0x58, 0xe5, 0x92, 0x34, 0xeb, 0x9a, 0xb4, 0x5b, 0xff, 0xeb, 0xc4, 0xad, 0xca, 0x44, 0x3c,
	0xf0, 0xee, 0x79, 0x7e, 0x69, 0x7d, 0x50, 0xf9, 0xee, 0x27, 0x77, 0xc6, 0xfb, 0x71, 0x16, 0xae,
	0x77, 0xc5, 0xa3, 0x2c, 0x7e, 0xa8, 0xfb, 0x81, 0xe4, 0x29, 0xfa, 0x08, 0x6a, 0x7c, 0x5c, 0x52,
	0x53, 0xc8, 0xfa, 0xd6, 0xed, 0xf6, 0x74, 0xb7, 0xb4, 0x27, 0x55, 0xdf, 0xad, 0xbc, 0x38, 0x71,
	0x67, 0xfc, 0xd2, 0x07, 0xb9, 0x50, 0x27, 0x4c, 0xc9, 0x51, 0x20, 0x38, 0x65, 0xca, 0x14, 0xbd,
	0xe6, 0x83, 0x81, 0x8e, 0x34, 0x82, 0xbe, 0x84, 0x85, 0xb0, 0x8f, 0x29, 0x0b, 0x68, 0x64, 0x0a,
	0x5f, 0xdb, 0xdd, 0xfe, 0xed, 0xc4, 0x7d, 0x33, 0xa6, 0xaa, 0x9f, 0x1f, 0xb7, 0x43, 0x9e, 0x76,
	0x42, 0x9e, 0xa5, 0x3c, 0x2b, 0x7e, 0xee, 0x65, 0xd1, 0xb3, 0x8e, 0x1a, 0x09, 0x92, 0xb5, 0x0f,
	0x99, 0x3a, 0x3d, 0x71, 0xab, 0x7b, 0xda, 0xfb, 0x70, 0xff, 0xcf, 0x13, 0xb7, 0x1a, 0xda, 0xa5,
	0x5f, 0x2c, 0x22, 0xe4, 0x42, 0xa5, 0x8f, 0xb3, 0xbe, 0x69, 0x9a, 0xda, 0xc5, 0xc3, 0x1b, 0x03,
	0xda, 0x80, 0xea, 0x71, 0xce, 0xa2, 0x84, 0x48, 0xd3, 0x36, 0x53, 0x9c, 0xb1, 0xad, 0x48, 0xcf,
	0x0f, 0x0e, 0xfc, 0xff, 0x42, 0x7a, 0x7c, 0x92, 0x09, 0xce, 0x32, 0x82, 0x50, 0xf1, 0x3f, 0xb6,
	0xd5, 0xad, 0xf4, 0x13, 0x58, 0x1e, 0xe0, 0x84, 0x46, 0xb6, 0x6d, 0x24, 0xc9, 0xf2, 0xc4, 0x9e,
	0xbf, 0xbe, 0xe5, 0x5d, 0x4e, 0xe1, 0xd3, 0x09, 0xd5, 0x37, 0xcc, 0x22, 0x93, 0x8d, 0xc1, 0x14,
	0x8e, 0x1a, 0x30, 0x27, 0x89, 0x2a, 0x66, 0x44, 0x2f, 0x8b, 0xe0, 0x3c, 0x58, 0x7d, 0x38, 0x54,
	0x84, 0x65, 0x94, 0xb3, 0xae, 0x30, 0x73, 0x39, 0x0e, 0xb3, 0x2b, 0x0a, 0xce, 0x2b, 0x07, 0xc0,
	0x27, 0x2a, 0x97, 0xec, 0x90, 0xf5, 0x38, 0x5a, 0x03, 0xd0, 0xed, 0xcd, 0x85, 0xe9, 0x3b, 0xc7,
	0x0e, 0x96, 0x90, 0xa4, 0x2b, 0x74, 0xaf, 0xdd, 0x02, 0xbd, 0x0e, 0x7a, 0x39, 0x8b, 0x4c, 0xd8,
	0x8b, 0x7e, 0x55, 0x48, 0x72, 0x90, 0xb3, 0x08, 0xdd, 0x01, 0xc8, 0x68, 0x1c, 0xf4, 0x30, 0x4d,
	0x88, 0xad, 0xda, 0x82, 0x69, 0xa6, 0x03, 0x03, 0xe8, 0x9a, 0x9b, 0xb0, 0x03, 0xdc, 0x53, 0x44,
	0x9a, 0xe4, 0x57, 0x7c, 0x30, 0xd0, 0x8e, 0x46, 0x4a, 0x42, 0xce, 0x14, 0x4d, 0x8a, 0x81, 0xb5,
	0x84, 0x27, 0x1a, 0x41, 0x77, 0x61, 0xb9, 0xec, 0xf3, 0x90, 0x33, 0x45, 0x86, 0x76, 0x52, 0xcf,
	0xb7, 0xf9, 0x9e, 0xc5, 0xbd, 0x47, 0x50, 0x7b, 0xac, 0xf0, 0x33, 0x62, 0xce, 0xb4, 0x02, 0xf3,
	0x99, 0xde, 0x14, 0xc7, 0xb1, 0x1b, 0xf4, 0x0e, 0x2c, 0xe7, 0xcc, 0x2c, 0x83, 0x88, 0x24, 0x78,
	0x14, 0x64, 0x24, 0x2c, 0x0e, 0xb5, 0x54, 0x18, 0xf6, 0x35, 0xfe, 0x98, 0x84, 0xde, 0xb7, 0x0e,
	0xfc, 0x6f, 0x27, 0x8e, 0x25, 0x89, 0xb1, 0xe2, 0xb2, 0x54, 0xbe, 0x0b, 0xcb, 0x38, 0x54, 0x39,
	0x4e, 0x02, 0x3c, 0xb1, 0x16, 0x05, 0x6f, 0x58, 0x43, 0xe9, 0x85, 0xb6, 0x01, 0xec, 0xdf, 0x51,
	0xd6, 0xe3, 0x45, 0xd5, 0xaf, 0x18, 0x9c, 0x89, 0xfa, 0x78, 0x70, 0xb2, 0x31, 0xe0, 0xfd, 0x3c,
	0x0b, 0x8d, 0xe9, 0xa6, 0x40, 0x7b, 0x50, 0x97, 0xa6, 0x7e, 0x56, 0xd7, 0x0e, 0xe4, 0xda, 0x65,
	0xdd, 0xb2, 0xc8, 0x85, 0x30, 0xc8, 0xb2, 0xec, 0xbb, 0x50, 0xb7, 0x77, 0xf1, 0xbf, 0x0c, 0x0e,
	0xac, 0x97, 0xd1, 0xd8, 0x87, 0xc5, 0x1e, 0x0e, 0x15, 0x97, 0x23, 0x2b, 0x32, 0xf7, 0xba, 0x22,
	0xf5, 0xc2, 0xcd, 0xa8, 0x7c, 0x02, 0x37, 0xca, 0x32, 0x1b, 0x9d, 0xca, 0xeb, 0xea, 0x5c, 0x9f,
	0x38, 0x9a, 0x6c, 0x3d, 0x9f, 0x03, 0x77, 0x3a, 0x5b, 0x9f, 0x53, 0xd5, 0x1f, 0x97, 0x44, 0x5f,
	0x45, 0xff, 0x25, 0xef, 0xea, 0xe4, 0xa1, 0xcf, 0x60, 0xa9, 0x6c, 0x69, 0x2b, 0x35, 0x6f, 0xa4,
	0x36, 0x2e, 0x4b, 0x5d, 0x31, 0x19, 0x85, 0xe8, 0x8d, 0x52, 0x43, 0xa3, 0x5b, 0xdf, 0x38, 0x30,
	0xdb, 0x15, 0xe8, 0x2b, 0x80, 0xf2, 0x1e, 0x42, 0xee, 0x55, 0x8f, 0xc7, 0xb9, 0x1b, 0x75, 0xf5,
	0xad, 0x7f, 0x20, 0x8c, 0xaf, 0x5c, 0x6f, 0xe3, 0xeb, 0x57, 0x7f, 0x7c, 0x3f, 0xeb, 0x7a, 0x77,
	0x3a, 0x97, 0xbe, 0x6b, 0x48, 0xc1, 0x0d, 0xb8, 0xd8, 0xdd, 0x7e, 0x71, 0xda, 0x72, 0x5e, 0x9e,
	0xb6, 0x9c, 0xdf, 0x4f, 0x5b, 0xce, 0xf3, 0xb3, 0xd6, 0xcc, 0xcb, 0xb3, 0xd6, 0xcc, 0xaf, 0x67,
	0xad, 0x99, 0x2f, 0xce, 0x3f, 0x31, 0x64, 0xa0, 0x5f, 0x98, 0x52, 0x68, 0x68, 0xa4, 0xcc, 0x33,
	0x73, 0x7c, 0xcd, 0x7c, 0xdd, 0xbc, 0xff, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xba, 0x4f, 0x59,
	0x18, 0x40, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// OpClient is the client API for Op service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OpClient interface {
	// EthereumOp defines a method submitting Ethereum operations.
	EthereumOp(ctx context.Context, in *OpMsgEthereum, opts ...grpc.CallOption) (*OpMsgEthereumResponse, error)
}

type opClient struct {
	cc grpc1.ClientConn
}

func NewOpClient(cc grpc1.ClientConn) OpClient {
	return &opClient{cc}
}

func (c *opClient) EthereumOp(ctx context.Context, in *OpMsgEthereum, opts ...grpc.CallOption) (*OpMsgEthereumResponse, error) {
	out := new(OpMsgEthereumResponse)
	err := c.cc.Invoke(ctx, "/ethermint.evm.v1.Op/EthereumOp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpServer is the server API for Op service.
type OpServer interface {
	// EthereumOp defines a method submitting Ethereum operations.
	EthereumOp(context.Context, *OpMsgEthereum) (*OpMsgEthereumResponse, error)
}

// UnimplementedOpServer can be embedded to have forward compatible implementations.
type UnimplementedOpServer struct {
}

func (*UnimplementedOpServer) EthereumOp(ctx context.Context, req *OpMsgEthereum) (*OpMsgEthereumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EthereumOp not implemented")
}

func RegisterOpServer(s grpc1.Server, srv OpServer) {
	s.RegisterService(&_Op_serviceDesc, srv)
}

func _Op_EthereumOp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpMsgEthereum)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServer).EthereumOp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethermint.evm.v1.Op/EthereumOp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServer).EthereumOp(ctx, req.(*OpMsgEthereum))
	}
	return interceptor(ctx, in, info, handler)
}

var _Op_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ethermint.evm.v1.Op",
	HandlerType: (*OpServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EthereumOp",
			Handler:    _Op_EthereumOp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ethermint/evm/v1/op.proto",
}

func (m *Operation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Operation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Operation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintOp(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.PaymasterAndData) > 0 {
		i -= len(m.PaymasterAndData)
		copy(dAtA[i:], m.PaymasterAndData)
		i = encodeVarintOp(dAtA, i, uint64(len(m.PaymasterAndData)))
		i--
		dAtA[i] = 0x52
	}
	if m.MaxPriorityFeePerGas != 0 {
		i = encodeVarintOp(dAtA, i, uint64(m.MaxPriorityFeePerGas))
		i--
		dAtA[i] = 0x48
	}
	if m.MaxFeePerGas != 0 {
		i = encodeVarintOp(dAtA, i, uint64(m.MaxFeePerGas))
		i--
		dAtA[i] = 0x40
	}
	if m.PreVerificationGas != 0 {
		i = encodeVarintOp(dAtA, i, uint64(m.PreVerificationGas))
		i--
		dAtA[i] = 0x38
	}
	if m.VerificationGasLimit != 0 {
		i = encodeVarintOp(dAtA, i, uint64(m.VerificationGasLimit))
		i--
		dAtA[i] = 0x30
	}
	if m.CallGasLimit != 0 {
		i = encodeVarintOp(dAtA, i, uint64(m.CallGasLimit))
		i--
		dAtA[i] = 0x28
	}
	if len(m.CallData) > 0 {
		i -= len(m.CallData)
		copy(dAtA[i:], m.CallData)
		i = encodeVarintOp(dAtA, i, uint64(len(m.CallData)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.InitCode) > 0 {
		i -= len(m.InitCode)
		copy(dAtA[i:], m.InitCode)
		i = encodeVarintOp(dAtA, i, uint64(len(m.InitCode)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Nonce != 0 {
		i = encodeVarintOp(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintOp(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OpMsgEthereum) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpMsgEthereum) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OpMsgEthereum) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Bundler) > 0 {
		i -= len(m.Bundler)
		copy(dAtA[i:], m.Bundler)
		i = encodeVarintOp(dAtA, i, uint64(len(m.Bundler)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintOp(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x22
	}
	if m.ChainID != nil {
		{
			size := m.ChainID.Size()
			i -= size
			if _, err := m.ChainID.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintOp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.EntryPoint) > 0 {
		i -= len(m.EntryPoint)
		copy(dAtA[i:], m.EntryPoint)
		i = encodeVarintOp(dAtA, i, uint64(len(m.EntryPoint)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Operation.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOp(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *OpMsgEthereumResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpMsgEthereumResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OpMsgEthereumResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ret) > 0 {
		i -= len(m.Ret)
		copy(dAtA[i:], m.Ret)
		i = encodeVarintOp(dAtA, i, uint64(len(m.Ret)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.ValidationResult.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOp(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintOp(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExtensionOptionsEthereumOp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExtensionOptionsEthereumOp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExtensionOptionsEthereumOp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ReturnInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReturnInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReturnInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PaymasterContext) > 0 {
		i -= len(m.PaymasterContext)
		copy(dAtA[i:], m.PaymasterContext)
		i = encodeVarintOp(dAtA, i, uint64(len(m.PaymasterContext)))
		i--
		dAtA[i] = 0x32
	}
	if m.ValidUntil != 0 {
		i = encodeVarintOp(dAtA, i, uint64(m.ValidUntil))
		i--
		dAtA[i] = 0x28
	}
	if m.ValidAfter != 0 {
		i = encodeVarintOp(dAtA, i, uint64(m.ValidAfter))
		i--
		dAtA[i] = 0x20
	}
	if m.SigFailed {
		i--
		if m.SigFailed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.PreFund) > 0 {
		i -= len(m.PreFund)
		copy(dAtA[i:], m.PreFund)
		i = encodeVarintOp(dAtA, i, uint64(len(m.PreFund)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PreOpGas) > 0 {
		i -= len(m.PreOpGas)
		copy(dAtA[i:], m.PreOpGas)
		i = encodeVarintOp(dAtA, i, uint64(len(m.PreOpGas)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StakeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StakeInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StakeInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UnstakeDelaySec) > 0 {
		i -= len(m.UnstakeDelaySec)
		copy(dAtA[i:], m.UnstakeDelaySec)
		i = encodeVarintOp(dAtA, i, uint64(len(m.UnstakeDelaySec)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Stake) > 0 {
		i -= len(m.Stake)
		copy(dAtA[i:], m.Stake)
		i = encodeVarintOp(dAtA, i, uint64(len(m.Stake)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AggregatorStakeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AggregatorStakeInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AggregatorStakeInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.StakeInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOp(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.ActualAggregator) > 0 {
		i -= len(m.ActualAggregator)
		copy(dAtA[i:], m.ActualAggregator)
		i = encodeVarintOp(dAtA, i, uint64(len(m.ActualAggregator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ValidationResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidationResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidationResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PaymasterInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOp(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.FactoryInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOp(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.SenderInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOp(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.ReturnInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOp(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ValidationResultWithAggregation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidationResultWithAggregation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidationResultWithAggregation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.AggregatorInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOp(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.PaymasterInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOp(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.FactoryInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOp(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.SenderInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOp(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.ReturnInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOp(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintOp(dAtA []byte, offset int, v uint64) int {
	offset -= sovOp(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Operation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovOp(uint64(l))
	}
	if m.Nonce != 0 {
		n += 1 + sovOp(uint64(m.Nonce))
	}
	l = len(m.InitCode)
	if l > 0 {
		n += 1 + l + sovOp(uint64(l))
	}
	l = len(m.CallData)
	if l > 0 {
		n += 1 + l + sovOp(uint64(l))
	}
	if m.CallGasLimit != 0 {
		n += 1 + sovOp(uint64(m.CallGasLimit))
	}
	if m.VerificationGasLimit != 0 {
		n += 1 + sovOp(uint64(m.VerificationGasLimit))
	}
	if m.PreVerificationGas != 0 {
		n += 1 + sovOp(uint64(m.PreVerificationGas))
	}
	if m.MaxFeePerGas != 0 {
		n += 1 + sovOp(uint64(m.MaxFeePerGas))
	}
	if m.MaxPriorityFeePerGas != 0 {
		n += 1 + sovOp(uint64(m.MaxPriorityFeePerGas))
	}
	l = len(m.PaymasterAndData)
	if l > 0 {
		n += 1 + l + sovOp(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovOp(uint64(l))
	}
	return n
}

func (m *OpMsgEthereum) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Operation.Size()
	n += 1 + l + sovOp(uint64(l))
	l = len(m.EntryPoint)
	if l > 0 {
		n += 1 + l + sovOp(uint64(l))
	}
	if m.ChainID != nil {
		l = m.ChainID.Size()
		n += 1 + l + sovOp(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovOp(uint64(l))
	}
	l = len(m.Bundler)
	if l > 0 {
		n += 1 + l + sovOp(uint64(l))
	}
	return n
}

func (m *OpMsgEthereumResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovOp(uint64(l))
	}
	l = m.ValidationResult.Size()
	n += 1 + l + sovOp(uint64(l))
	l = len(m.Ret)
	if l > 0 {
		n += 1 + l + sovOp(uint64(l))
	}
	return n
}

func (m *ExtensionOptionsEthereumOp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ReturnInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PreOpGas)
	if l > 0 {
		n += 1 + l + sovOp(uint64(l))
	}
	l = len(m.PreFund)
	if l > 0 {
		n += 1 + l + sovOp(uint64(l))
	}
	if m.SigFailed {
		n += 2
	}
	if m.ValidAfter != 0 {
		n += 1 + sovOp(uint64(m.ValidAfter))
	}
	if m.ValidUntil != 0 {
		n += 1 + sovOp(uint64(m.ValidUntil))
	}
	l = len(m.PaymasterContext)
	if l > 0 {
		n += 1 + l + sovOp(uint64(l))
	}
	return n
}

func (m *StakeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Stake)
	if l > 0 {
		n += 1 + l + sovOp(uint64(l))
	}
	l = len(m.UnstakeDelaySec)
	if l > 0 {
		n += 1 + l + sovOp(uint64(l))
	}
	return n
}

func (m *AggregatorStakeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ActualAggregator)
	if l > 0 {
		n += 1 + l + sovOp(uint64(l))
	}
	l = m.StakeInfo.Size()
	n += 1 + l + sovOp(uint64(l))
	return n
}

func (m *ValidationResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ReturnInfo.Size()
	n += 1 + l + sovOp(uint64(l))
	l = m.SenderInfo.Size()
	n += 1 + l + sovOp(uint64(l))
	l = m.FactoryInfo.Size()
	n += 1 + l + sovOp(uint64(l))
	l = m.PaymasterInfo.Size()
	n += 1 + l + sovOp(uint64(l))
	return n
}

func (m *ValidationResultWithAggregation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ReturnInfo.Size()
	n += 1 + l + sovOp(uint64(l))
	l = m.SenderInfo.Size()
	n += 1 + l + sovOp(uint64(l))
	l = m.FactoryInfo.Size()
	n += 1 + l + sovOp(uint64(l))
	l = m.PaymasterInfo.Size()
	n += 1 + l + sovOp(uint64(l))
	l = m.AggregatorInfo.Size()
	n += 1 + l + sovOp(uint64(l))
	return n
}

func sovOp(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOp(x uint64) (n int) {
	return sovOp(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Operation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Operation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Operation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitCode", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOp
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitCode = append(m.InitCode[:0], dAtA[iNdEx:postIndex]...)
			if m.InitCode == nil {
				m.InitCode = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOp
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CallData = append(m.CallData[:0], dAtA[iNdEx:postIndex]...)
			if m.CallData == nil {
				m.CallData = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallGasLimit", wireType)
			}
			m.CallGasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CallGasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerificationGasLimit", wireType)
			}
			m.VerificationGasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VerificationGasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreVerificationGas", wireType)
			}
			m.PreVerificationGas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PreVerificationGas |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxFeePerGas", wireType)
			}
			m.MaxFeePerGas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxFeePerGas |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPriorityFeePerGas", wireType)
			}
			m.MaxPriorityFeePerGas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxPriorityFeePerGas |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymasterAndData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOp
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymasterAndData = append(m.PaymasterAndData[:0], dAtA[iNdEx:postIndex]...)
			if m.PaymasterAndData == nil {
				m.PaymasterAndData = []byte{}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOp
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpMsgEthereum) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpMsgEthereum: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpMsgEthereum: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Operation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryPoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntryPoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Int
			m.ChainID = &v
			if err := m.ChainID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bundler", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bundler = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpMsgEthereumResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpMsgEthereumResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpMsgEthereumResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidationResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ValidationResult.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ret", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOp
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ret = append(m.Ret[:0], dAtA[iNdEx:postIndex]...)
			if m.Ret == nil {
				m.Ret = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExtensionOptionsEthereumOp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExtensionOptionsEthereumOp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExtensionOptionsEthereumOp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipOp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReturnInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReturnInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReturnInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreOpGas", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOp
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreOpGas = append(m.PreOpGas[:0], dAtA[iNdEx:postIndex]...)
			if m.PreOpGas == nil {
				m.PreOpGas = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreFund", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOp
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreFund = append(m.PreFund[:0], dAtA[iNdEx:postIndex]...)
			if m.PreFund == nil {
				m.PreFund = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigFailed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SigFailed = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidAfter", wireType)
			}
			m.ValidAfter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidAfter |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidUntil", wireType)
			}
			m.ValidUntil = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidUntil |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymasterContext", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOp
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymasterContext = append(m.PaymasterContext[:0], dAtA[iNdEx:postIndex]...)
			if m.PaymasterContext == nil {
				m.PaymasterContext = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StakeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stake", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOp
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stake = append(m.Stake[:0], dAtA[iNdEx:postIndex]...)
			if m.Stake == nil {
				m.Stake = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnstakeDelaySec", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOp
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnstakeDelaySec = append(m.UnstakeDelaySec[:0], dAtA[iNdEx:postIndex]...)
			if m.UnstakeDelaySec == nil {
				m.UnstakeDelaySec = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AggregatorStakeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AggregatorStakeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AggregatorStakeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActualAggregator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActualAggregator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StakeInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidationResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidationResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidationResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ReturnInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SenderInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FactoryInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FactoryInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymasterInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PaymasterInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidationResultWithAggregation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidationResultWithAggregation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidationResultWithAggregation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ReturnInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SenderInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FactoryInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FactoryInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymasterInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PaymasterInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregatorInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AggregatorInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOp(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOp
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOp
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOp
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOp
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOp        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOp          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOp = fmt.Errorf("proto: unexpected end of group")
)
