syntax = "proto3";
package ethermint.evm.v1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";

option go_package = "github.com/evmos/ethermint/x/evm/types";

// Op defines the evm operation Op service.
service Op {
  // EthereumOp defines a method submitting Ethereum operations.
  rpc EthereumOp(OpMsgEthereum) returns (OpMsgEthereumResponse) {
    option (google.api.http).post = "/ethermint/evm/v1/ethereum_op";
  };
}

// Operation is a structure that describes a transaction to be sent on behalf of a user. To avoid confusion, it is not
// named “transaction”
message Operation {
  option (gogoproto.goproto_getters) = false;
  // sender: the account making the operation
  string sender = 1;
  // nonce: anti-replay parameter; also used as the salt for first-time account creation
  uint64 nonce = 2;
  // init_code: the initCode of the account (needed if and only if the account is not yet on-chain and needs to be
  // created)
  bytes init_code = 3;
  // call_data: the data to pass to the sender during the main execution call
  bytes call_data = 4;
  // call_gas_limit: the amount of gas to allocate the main execution call
  uint64 call_gas_limit = 5;
  // verification_gas_limit: the amount of gas to allocate for the verification step
  uint64 verification_gas_limit = 6;
  // pre_verification_gas_limit: the amount of gas to pay for to compensate the bundler for pre-verification execution
  // and calldata
  uint64 pre_verification_gas = 7;
  // max_fee_per_gas: maximum fee per gas (similar to EIP-1559 max_fee_per_gas)
  uint64 max_fee_per_gas = 8;
  // max_priority_fee_per_gas: maximum priority fee per gas (similar to EIP-1559 max_priority_fee_per_gas)
  uint64 max_priority_fee_per_gas = 9;
  // paymaster_and_data: address of paymaster sponsoring the transaction, followed by extra data to send to the
  // paymaster (empty for self-sponsored transaction)
  bytes paymaster_and_data = 10;
  // signature: data passed into the account along with the nonce during the verification step
  bytes signature = 11 [(gogoproto.moretags) = "rlp:\"-\""];
}

// EthereumOp encapsulates an Ethereum operation as an SDK message.
message OpMsgEthereum {
  option (gogoproto.goproto_getters) = false;
  // operation: user operation
  Operation operation = 1 [(gogoproto.nullable) = false];
  // entry_point: address of a singleton contract to execute bundles of Operations
  string entry_point = 2;
  // chain_id of the destination EVM chain
  string chain_id = 3 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.customname) = "ChainID",
    (gogoproto.jsontag) = "chainID"
  ];
  string hash = 4 [(gogoproto.moretags) = "rlp:\"-\""];
  string bundler = 5 [(gogoproto.moretags) = "rlp:\"-\""];
}

// EthereumOpResponse defines the Msg/EthereumOp response type.
message OpMsgEthereumResponse {
  option (gogoproto.goproto_getters) = false;
  // hash of the ethereum operation in hex format. This hash differs from the
  // Tendermint sha256 hash of the operation bytes
  string hash = 1;
  ValidationResult validation_result = 2 [(gogoproto.nullable) = false];
  bytes ret = 3;
}

// ExtensionOptionsEthereumOp is an extension option for ethereum transactions
message ExtensionOptionsEthereumOp {
  option (gogoproto.goproto_getters) = false;
}

message ReturnInfo {
  bytes pre_op_gas = 1;
  bytes pre_fund = 2;
  bool sig_failed = 3;
  uint64 valid_after = 4;
  uint64 valid_until = 5;
  bytes paymaster_context = 6;
}

message StakeInfo {
  bytes stake = 1;
  bytes unstake_delay_sec = 2;
}

message AggregatorStakeInfo {
  string actual_aggregator = 1;
  StakeInfo stake_info = 2 [(gogoproto.nullable) = false];
}

message ValidationResult {
  ReturnInfo return_info = 1 [(gogoproto.nullable) = false];
  StakeInfo sender_info = 2 [(gogoproto.nullable) = false];
  StakeInfo factory_info = 3 [(gogoproto.nullable) = false];
  StakeInfo paymaster_info = 4 [(gogoproto.nullable) = false];
}

message ValidationResultWithAggregation {
  ReturnInfo return_info = 1 [(gogoproto.nullable) = false];
  StakeInfo sender_info = 2 [(gogoproto.nullable) = false];
  StakeInfo factory_info = 3 [(gogoproto.nullable) = false];
  StakeInfo paymaster_info = 4 [(gogoproto.nullable) = false];
  AggregatorStakeInfo aggregator_info = 5 [(gogoproto.nullable) = false];
}